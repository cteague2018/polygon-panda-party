{"ast":null,"code":"var _jsxFileName = \"C:\\\\Polygon Panda Party\\\\polygon-panda-party\\\\my-express-app\\\\src\\\\components\\\\WalletConnect.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ethers } from 'ethers'; // Ensure ethers is imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletConnect = ({\n  onConnect\n}) => {\n  _s();\n  const [walletAddress, setWalletAddress] = useState('');\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      const provider = new ethers.BrowserProvider(window.ethereum); // Updated for ethers v6\n      try {\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n        setWalletAddress(address);\n        onConnect(address);\n      } catch (error) {\n        if (error.code === 4001) {\n          alert('Connection request was rejected. Please try again.'); // User rejected the request\n        } else {\n          console.error(\"Error connecting to wallet:\", error);\n          alert('An error occurred while connecting to the wallet.'); // Handle other errors\n        }\n      }\n    } else {\n      alert('Please install MetaMask!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      className: \"bg-blue-500 text-white p-2 rounded\",\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), walletAddress && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connected: \", walletAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(WalletConnect, \"SM6J6Jv3vxLi47+RieKFbfI3nq0=\");\n_c = WalletConnect;\nexport default WalletConnect;\nvar _c;\n$RefreshReg$(_c, \"WalletConnect\");","map":{"version":3,"names":["React","useState","ethers","jsxDEV","_jsxDEV","WalletConnect","onConnect","_s","walletAddress","setWalletAddress","connectWallet","window","ethereum","provider","BrowserProvider","request","method","signer","getSigner","address","getAddress","error","code","alert","console","children","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Polygon Panda Party/polygon-panda-party/my-express-app/src/components/WalletConnect.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { ethers } from 'ethers'; // Ensure ethers is imported\r\n\r\nconst WalletConnect = ({ onConnect }) => {\r\n  const [walletAddress, setWalletAddress] = useState('');\r\n\r\n  const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n      const provider = new ethers.BrowserProvider(window.ethereum); // Updated for ethers v6\r\n      try {\r\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        const signer = provider.getSigner();\r\n        const address = await signer.getAddress();\r\n        setWalletAddress(address);\r\n        onConnect(address);\r\n      } catch (error) {\r\n        if (error.code === 4001) {\r\n          alert('Connection request was rejected. Please try again.'); // User rejected the request\r\n        } else {\r\n          console.error(\"Error connecting to wallet:\", error);\r\n          alert('An error occurred while connecting to the wallet.'); // Handle other errors\r\n        }\r\n      }\r\n    } else {\r\n      alert('Please install MetaMask!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={connectWallet} className=\"bg-blue-500 text-white p-2 rounded\">\r\n        Connect Wallet\r\n      </button>\r\n      {walletAddress && <p>Connected: {walletAddress}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WalletConnect;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,QAAQ,QAAQ,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMS,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAIC,MAAM,CAACC,QAAQ,EAAE;MACnB,MAAMC,QAAQ,GAAG,IAAIX,MAAM,CAACY,eAAe,CAACH,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC;MAC9D,IAAI;QACF,MAAMD,MAAM,CAACC,QAAQ,CAACG,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAsB,CAAC,CAAC;QAChE,MAAMC,MAAM,GAAGJ,QAAQ,CAACK,SAAS,CAAC,CAAC;QACnC,MAAMC,OAAO,GAAG,MAAMF,MAAM,CAACG,UAAU,CAAC,CAAC;QACzCX,gBAAgB,CAACU,OAAO,CAAC;QACzBb,SAAS,CAACa,OAAO,CAAC;MACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACd,IAAIA,KAAK,CAACC,IAAI,KAAK,IAAI,EAAE;UACvBC,KAAK,CAAC,oDAAoD,CAAC,CAAC,CAAC;QAC/D,CAAC,MAAM;UACLC,OAAO,CAACH,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;UACnDE,KAAK,CAAC,mDAAmD,CAAC,CAAC,CAAC;QAC9D;MACF;IACF,CAAC,MAAM;MACLA,KAAK,CAAC,0BAA0B,CAAC;IACnC;EACF,CAAC;EAED,oBACEnB,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAQsB,OAAO,EAAEhB,aAAc;MAACiB,SAAS,EAAC,oCAAoC;MAAAF,QAAA,EAAC;IAE/E;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACRvB,aAAa,iBAAIJ,OAAA;MAAAqB,QAAA,GAAG,aAAW,EAACjB,aAAa;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEV,CAAC;AAACxB,EAAA,CAjCIF,aAAa;AAAA2B,EAAA,GAAb3B,aAAa;AAmCnB,eAAeA,aAAa;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}