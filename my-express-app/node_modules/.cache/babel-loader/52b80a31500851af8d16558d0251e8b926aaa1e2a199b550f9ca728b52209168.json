{"ast":null,"code":"var _jsxFileName = \"C:\\\\Polygon Panda Party\\\\polygon-panda-party\\\\my-express-app\\\\src\\\\components\\\\Winners.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport WalletConnect from './WalletConnect';\nimport { ethers } from 'ethers'; // Ensure ethers is imported  \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Winners = () => {\n  _s();\n  const [currentWinners, setCurrentWinners] = useState([]);\n  const [previousWinners, setPreviousWinners] = useState([]);\n  const [walletAddress, setWalletAddress] = useState('');\n  const totalNFTs = 10000;\n  const selectWinners = () => {\n    const winners = [];\n    for (let i = 0; i < 10; i++) {\n      const randomIndex = Math.floor(Math.random() * totalNFTs);\n      winners.push(`NFT #${randomIndex + 1}`); // Corrected line  \n    }\n    setCurrentWinners(winners);\n  };\n  const verifyOwnership = async nftId => {\n    const nftContractAddress = 'YOUR_NFT_CONTRACT_ADDRESS'; // Replace with your NFT contract address  \n    const nftContractABI = []; // Add your NFT contract ABI here  \n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const contract = new ethers.Contract(nftContractAddress, nftContractABI, provider);\n    const owner = await contract.ownerOf(nftId);\n    return owner.toLowerCase() === walletAddress.toLowerCase();\n  };\n  const handleVerifyWinners = async () => {\n    const verifiedWinners = [];\n    for (const nft of currentWinners) {\n      const nftId = nft.split('#')[1];\n      const isOwner = await verifyOwnership(nftId);\n      if (isOwner) {\n        verifiedWinners.push(nft);\n      }\n    }\n    alert(`Verified Winners: ${verifiedWinners.join(', ')}`);\n    setPreviousWinners(prev => [...prev, ...verifiedWinners]);\n    setCurrentWinners([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Current Winners\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WalletConnect, {\n      onConnect: setWalletAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: selectWinners,\n      className: \"bg-green-500 text-white p-2 rounded\",\n      children: \"Select Winners\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: currentWinners.map((winner, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: winner\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), currentWinners.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleVerifyWinners,\n      className: \"bg-blue-500 text-white p-2 rounded\",\n      children: \"Verify Winners\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Previous Winners\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: previousWinners.map((winner, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: winner\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Winners, \"0Tuua6d0lKO+HO065+RAb5UhuDY=\");\n_c = Winners;\nexport default Winners;\nvar _c;\n$RefreshReg$(_c, \"Winners\");","map":{"version":3,"names":["React","useState","WalletConnect","ethers","jsxDEV","_jsxDEV","Winners","_s","currentWinners","setCurrentWinners","previousWinners","setPreviousWinners","walletAddress","setWalletAddress","totalNFTs","selectWinners","winners","i","randomIndex","Math","floor","random","push","verifyOwnership","nftId","nftContractAddress","nftContractABI","provider","providers","Web3Provider","window","ethereum","contract","Contract","owner","ownerOf","toLowerCase","handleVerifyWinners","verifiedWinners","nft","split","isOwner","alert","join","prev","children","fileName","_jsxFileName","lineNumber","columnNumber","onConnect","onClick","className","map","winner","index","length","_c","$RefreshReg$"],"sources":["C:/Polygon Panda Party/polygon-panda-party/my-express-app/src/components/Winners.js"],"sourcesContent":["import React, { useState } from 'react';  \r\nimport WalletConnect from './WalletConnect';  \r\nimport { ethers } from 'ethers'; // Ensure ethers is imported  \r\n\r\nconst Winners = () => {  \r\n  const [currentWinners, setCurrentWinners] = useState([]);  \r\n  const [previousWinners, setPreviousWinners] = useState([]);  \r\n  const [walletAddress, setWalletAddress] = useState('');  \r\n  const totalNFTs = 10000;  \r\n\r\n  const selectWinners = () => {  \r\n    const winners = [];  \r\n    for (let i = 0; i < 10; i++) {  \r\n      const randomIndex = Math.floor(Math.random() * totalNFTs);  \r\n      winners.push(`NFT #${randomIndex + 1}`); // Corrected line  \r\n    }  \r\n    setCurrentWinners(winners);  \r\n  };  \r\n\r\n  const verifyOwnership = async (nftId) => {  \r\n    const nftContractAddress = 'YOUR_NFT_CONTRACT_ADDRESS'; // Replace with your NFT contract address  \r\n    const nftContractABI = []; // Add your NFT contract ABI here  \r\n\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);  \r\n    const contract = new ethers.Contract(nftContractAddress, nftContractABI, provider);  \r\n    const owner = await contract.ownerOf(nftId);  \r\n\r\n    return owner.toLowerCase() === walletAddress.toLowerCase();  \r\n  };  \r\n\r\n  const handleVerifyWinners = async () => {  \r\n    const verifiedWinners = [];  \r\n    for (const nft of currentWinners) {  \r\n      const nftId = nft.split('#')[1];  \r\n      const isOwner = await verifyOwnership(nftId);  \r\n      if (isOwner) {  \r\n        verifiedWinners.push(nft);  \r\n      }  \r\n    }  \r\n    alert(`Verified Winners: ${verifiedWinners.join(', ')}`);  \r\n    setPreviousWinners((prev) => [...prev, ...verifiedWinners]);  \r\n    setCurrentWinners([]);  \r\n  };  \r\n\r\n  return (  \r\n    <div>  \r\n      <h1>Current Winners</h1>  \r\n      <WalletConnect onConnect={setWalletAddress} />  \r\n      <button onClick={selectWinners} className=\"bg-green-500 text-white p-2 rounded\">  \r\n        Select Winners  \r\n      </button>  \r\n      <ul>  \r\n        {currentWinners.map((winner, index) => (  \r\n          <li key={index}>{winner}</li>  \r\n        ))}  \r\n      </ul>  \r\n      {currentWinners.length > 0 && (  \r\n        <button onClick={handleVerifyWinners} className=\"bg-blue-500 text-white p-2 rounded\">  \r\n          Verify Winners  \r\n        </button>  \r\n      )}  \r\n\r\n      <h1>Previous Winners</h1>  \r\n      <ul>  \r\n        {previousWinners.map((winner, index) => (  \r\n          <li key={index}>{winner}</li>  \r\n        ))}  \r\n      </ul>  \r\n    </div>  \r\n  );  \r\n};  \r\n\r\nexport default Winners;  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}