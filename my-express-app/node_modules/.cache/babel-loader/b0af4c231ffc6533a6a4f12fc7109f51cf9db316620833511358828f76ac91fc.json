{"ast":null,"code":"var _jsxFileName = \"C:\\\\Polygon Panda Party\\\\polygon-panda-party\\\\my-express-app\\\\src\\\\components\\\\Winners.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport WalletConnect from './WalletConnect';\nimport { ethers } from 'ethers'; // Correct import    \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Winners = () => {\n  _s();\n  const [currentWinners, setCurrentWinners] = useState([]);\n  const [previousWinners, setPreviousWinners] = useState([]);\n  const [walletAddress, setWalletAddress] = useState('');\n  const totalNFTs = 10000;\n  const selectWinners = () => {\n    const winners = [];\n    const uniqueWinners = new Set(); // Use a Set to ensure uniqueness  \n\n    while (uniqueWinners.size < 10) {\n      // Ensure we get 10 unique winners  \n      const randomIndex = Math.floor(Math.random() * totalNFTs);\n      uniqueWinners.add(`NFT #${randomIndex + 1}`); // Add unique NFT IDs  \n    }\n    setCurrentWinners(Array.from(uniqueWinners)); // Convert Set back to Array  \n  };\n  const verifyOwnership = async nftId => {\n    const nftContractAddress = 'YOUR_NFT_CONTRACT_ADDRESS'; // Replace with your NFT contract address    \n    const nftContractABI = []; // Add your NFT contract ABI here    \n\n    const provider = new ethers.BrowserProvider(window.ethereum); // Updated for ethers v6    \n    const contract = new ethers.Contract(nftContractAddress, nftContractABI, provider);\n    const owner = await contract.ownerOf(nftId);\n    return owner.toLowerCase() === walletAddress.toLowerCase();\n  };\n  const handleVerifyWinners = async () => {\n    const verifiedWinners = [];\n    for (const nft of currentWinners) {\n      const nftId = nft.split('#')[1];\n      const isOwner = await verifyOwnership(nftId);\n      if (isOwner) {\n        verifiedWinners.push(nft);\n      }\n    }\n    alert(`Verified Winners: ${verifiedWinners.join(', ')}`);\n    setPreviousWinners(prev => [...prev, ...verifiedWinners]);\n    setCurrentWinners([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Current Winners\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WalletConnect, {\n      onConnect: setWalletAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: selectWinners,\n      className: \"bg-green-500 text-white p-2 rounded\",\n      children: \"Select Winners\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: currentWinners.map(winner => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: winner\n      }, winner + Date.now(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this) // Use a unique key  \n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), currentWinners.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleVerifyWinners,\n      className: \"bg-blue-500 text-white p-2 rounded\",\n      children: \"Verify Winners\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Previous Winners\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: previousWinners.map(winner => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: winner\n      }, winner + Date.now(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this) // Use a unique key  \n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(Winners, \"0Tuua6d0lKO+HO065+RAb5UhuDY=\");\n_c = Winners;\nexport default Winners;\nvar _c;\n$RefreshReg$(_c, \"Winners\");","map":{"version":3,"names":["React","useState","WalletConnect","ethers","jsxDEV","_jsxDEV","Winners","_s","currentWinners","setCurrentWinners","previousWinners","setPreviousWinners","walletAddress","setWalletAddress","totalNFTs","selectWinners","winners","uniqueWinners","Set","size","randomIndex","Math","floor","random","add","Array","from","verifyOwnership","nftId","nftContractAddress","nftContractABI","provider","BrowserProvider","window","ethereum","contract","Contract","owner","ownerOf","toLowerCase","handleVerifyWinners","verifiedWinners","nft","split","isOwner","push","alert","join","prev","children","fileName","_jsxFileName","lineNumber","columnNumber","onConnect","onClick","className","map","winner","Date","now","length","_c","$RefreshReg$"],"sources":["C:/Polygon Panda Party/polygon-panda-party/my-express-app/src/components/Winners.js"],"sourcesContent":["import React, { useState } from 'react';    \r\nimport WalletConnect from './WalletConnect';    \r\nimport { ethers } from 'ethers'; // Correct import    \r\n\r\nconst Winners = () => {    \r\n  const [currentWinners, setCurrentWinners] = useState([]);    \r\n  const [previousWinners, setPreviousWinners] = useState([]);    \r\n  const [walletAddress, setWalletAddress] = useState('');    \r\n  const totalNFTs = 10000;    \r\n\r\n  const selectWinners = () => {    \r\n    const winners = [];    \r\n    const uniqueWinners = new Set(); // Use a Set to ensure uniqueness  \r\n\r\n    while (uniqueWinners.size < 10) { // Ensure we get 10 unique winners  \r\n      const randomIndex = Math.floor(Math.random() * totalNFTs);  \r\n      uniqueWinners.add(`NFT #${randomIndex + 1}`); // Add unique NFT IDs  \r\n    }  \r\n\r\n    setCurrentWinners(Array.from(uniqueWinners)); // Convert Set back to Array  \r\n  };    \r\n\r\n  const verifyOwnership = async (nftId) => {    \r\n    const nftContractAddress = 'YOUR_NFT_CONTRACT_ADDRESS'; // Replace with your NFT contract address    \r\n    const nftContractABI = []; // Add your NFT contract ABI here    \r\n\r\n    const provider = new ethers.BrowserProvider(window.ethereum); // Updated for ethers v6    \r\n    const contract = new ethers.Contract(nftContractAddress, nftContractABI, provider);    \r\n    const owner = await contract.ownerOf(nftId);    \r\n\r\n    return owner.toLowerCase() === walletAddress.toLowerCase();    \r\n  };    \r\n\r\n  const handleVerifyWinners = async () => {    \r\n    const verifiedWinners = [];    \r\n    for (const nft of currentWinners) {    \r\n      const nftId = nft.split('#')[1];    \r\n      const isOwner = await verifyOwnership(nftId);    \r\n      if (isOwner) {    \r\n        verifiedWinners.push(nft);    \r\n      }    \r\n    }    \r\n    alert(`Verified Winners: ${verifiedWinners.join(', ')}`);    \r\n    setPreviousWinners((prev) => [...prev, ...verifiedWinners]);    \r\n    setCurrentWinners([]);    \r\n  };    \r\n\r\n  return (    \r\n    <div>    \r\n      <h1>Current Winners</h1>    \r\n      <WalletConnect onConnect={setWalletAddress} />    \r\n      <button onClick={selectWinners} className=\"bg-green-500 text-white p-2 rounded\">    \r\n        Select Winners    \r\n      </button>    \r\n      <ul>    \r\n        {currentWinners.map((winner) => (    \r\n          <li key={winner + Date.now()}>{winner}</li> // Use a unique key  \r\n        ))}    \r\n      </ul>    \r\n      {currentWinners.length > 0 && (    \r\n        <button onClick={handleVerifyWinners} className=\"bg-blue-500 text-white p-2 rounded\">    \r\n          Verify Winners    \r\n        </button>    \r\n      )}    \r\n\r\n      <h1>Previous Winners</h1>    \r\n      <ul>    \r\n        {previousWinners.map((winner) => (    \r\n          <li key={winner + Date.now()}>{winner}</li> // Use a unique key  \r\n        ))}    \r\n      </ul>    \r\n    </div>    \r\n  );    \r\n};    \r\n\r\nexport default Winners;    "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}