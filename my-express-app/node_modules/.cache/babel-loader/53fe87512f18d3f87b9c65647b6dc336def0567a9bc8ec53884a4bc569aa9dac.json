{"ast":null,"code":"import React,{useState}from'react';import WalletConnect from'./WalletConnect';import{ethers}from'ethers';// Correct import    \nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Winners=()=>{const[currentWinners,setCurrentWinners]=useState([]);const[previousWinners,setPreviousWinners]=useState([]);const[walletAddress,setWalletAddress]=useState('');const totalNFTs=10000;const selectWinners=()=>{const uniqueWinners=new Set();// Use a Set to ensure uniqueness  \nwhile(uniqueWinners.size<10){// Ensure we get 10 unique winners  \nconst randomIndex=Math.floor(Math.random()*totalNFTs);uniqueWinners.add(\"NFT #\".concat(randomIndex+1));// Add unique NFT IDs  \n}setCurrentWinners(Array.from(uniqueWinners));// Convert Set back to Array  \n};const verifyOwnership=async nftId=>{const nftContractAddress='YOUR_NFT_CONTRACT_ADDRESS';// Replace with your NFT contract address    \nconst nftContractABI=[];// Add your NFT contract ABI here    \nconst provider=new ethers.BrowserProvider(window.ethereum);// Updated for ethers v6    \nconst contract=new ethers.Contract(nftContractAddress,nftContractABI,provider);const owner=await contract.ownerOf(nftId);return owner.toLowerCase()===walletAddress.toLowerCase();};const handleVerifyWinners=async()=>{const verifiedWinners=[];for(const nft of currentWinners){const nftId=nft.split('#')[1];const isOwner=await verifyOwnership(nftId);if(isOwner){verifiedWinners.push(nft);}}alert(\"Verified Winners: \".concat(verifiedWinners.join(', ')));setPreviousWinners(prev=>[...prev,...verifiedWinners]);setCurrentWinners([]);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Current Winners\"}),/*#__PURE__*/_jsx(WalletConnect,{onConnect:setWalletAddress}),/*#__PURE__*/_jsx(\"button\",{onClick:selectWinners,className:\"bg-green-500 text-white p-2 rounded\",children:\"Select Winners\"}),/*#__PURE__*/_jsx(\"ul\",{children:currentWinners.map(winner=>/*#__PURE__*/_jsx(\"li\",{children:winner},winner+Date.now())// Use a unique key  \n)}),currentWinners.length>0&&/*#__PURE__*/_jsx(\"button\",{onClick:handleVerifyWinners,className:\"bg-blue-500 text-white p-2 rounded\",children:\"Verify Winners\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"Previous Winners\"}),/*#__PURE__*/_jsx(\"ul\",{children:previousWinners.map(winner=>/*#__PURE__*/_jsx(\"li\",{children:winner},winner+Date.now())// Use a unique key  \n)})]});};export default Winners;","map":{"version":3,"names":["React","useState","WalletConnect","ethers","jsx","_jsx","jsxs","_jsxs","Winners","currentWinners","setCurrentWinners","previousWinners","setPreviousWinners","walletAddress","setWalletAddress","totalNFTs","selectWinners","uniqueWinners","Set","size","randomIndex","Math","floor","random","add","concat","Array","from","verifyOwnership","nftId","nftContractAddress","nftContractABI","provider","BrowserProvider","window","ethereum","contract","Contract","owner","ownerOf","toLowerCase","handleVerifyWinners","verifiedWinners","nft","split","isOwner","push","alert","join","prev","children","onConnect","onClick","className","map","winner","Date","now","length"],"sources":["C:/Polygon Panda Party/polygon-panda-party/my-express-app/src/components/Winners.js"],"sourcesContent":["import React, { useState } from 'react';    \r\nimport WalletConnect from './WalletConnect';    \r\nimport { ethers } from 'ethers'; // Correct import    \r\n\r\nconst Winners = () => {    \r\n  const [currentWinners, setCurrentWinners] = useState([]);    \r\n  const [previousWinners, setPreviousWinners] = useState([]);    \r\n  const [walletAddress, setWalletAddress] = useState('');    \r\n  const totalNFTs = 10000;    \r\n\r\n  const selectWinners = () => {    \r\n    const uniqueWinners = new Set(); // Use a Set to ensure uniqueness  \r\n\r\n    while (uniqueWinners.size < 10) { // Ensure we get 10 unique winners  \r\n      const randomIndex = Math.floor(Math.random() * totalNFTs);  \r\n      uniqueWinners.add(`NFT #${randomIndex + 1}`); // Add unique NFT IDs  \r\n    }  \r\n\r\n    setCurrentWinners(Array.from(uniqueWinners)); // Convert Set back to Array  \r\n  };    \r\n\r\n  const verifyOwnership = async (nftId) => {    \r\n    const nftContractAddress = 'YOUR_NFT_CONTRACT_ADDRESS'; // Replace with your NFT contract address    \r\n    const nftContractABI = []; // Add your NFT contract ABI here    \r\n\r\n    const provider = new ethers.BrowserProvider(window.ethereum); // Updated for ethers v6    \r\n    const contract = new ethers.Contract(nftContractAddress, nftContractABI, provider);    \r\n    const owner = await contract.ownerOf(nftId);    \r\n\r\n    return owner.toLowerCase() === walletAddress.toLowerCase();    \r\n  };    \r\n\r\n  const handleVerifyWinners = async () => {    \r\n    const verifiedWinners = [];    \r\n    for (const nft of currentWinners) {    \r\n      const nftId = nft.split('#')[1];    \r\n      const isOwner = await verifyOwnership(nftId);    \r\n      if (isOwner) {    \r\n        verifiedWinners.push(nft);    \r\n      }    \r\n    }    \r\n    alert(`Verified Winners: ${verifiedWinners.join(', ')}`);    \r\n    setPreviousWinners((prev) => [...prev, ...verifiedWinners]);    \r\n    setCurrentWinners([]);    \r\n  };    \r\n\r\n  return (    \r\n    <div>    \r\n      <h1>Current Winners</h1>    \r\n      <WalletConnect onConnect={setWalletAddress} />    \r\n      <button onClick={selectWinners} className=\"bg-green-500 text-white p-2 rounded\">    \r\n        Select Winners    \r\n      </button>    \r\n      <ul>    \r\n        {currentWinners.map((winner) => (    \r\n          <li key={winner + Date.now()}>{winner}</li> // Use a unique key  \r\n        ))}    \r\n      </ul>    \r\n      {currentWinners.length > 0 && (    \r\n        <button onClick={handleVerifyWinners} className=\"bg-blue-500 text-white p-2 rounded\">    \r\n          Verify Winners    \r\n        </button>    \r\n      )}    \r\n\r\n      <h1>Previous Winners</h1>    \r\n      <ul>    \r\n        {previousWinners.map((winner) => (    \r\n          <li key={winner + Date.now()}>{winner}</li> // Use a unique key  \r\n        ))}    \r\n      </ul>    \r\n    </div>    \r\n  );    \r\n};    \r\n\r\nexport default Winners;    "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}