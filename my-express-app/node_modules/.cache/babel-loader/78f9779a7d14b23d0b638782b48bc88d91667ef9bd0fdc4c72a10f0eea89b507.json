{"ast":null,"code":"var _jsxFileName = \"C:\\\\Polygon Panda Party\\\\polygon-panda-party\\\\my-express-app\\\\src\\\\components\\\\WalletConnect.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Web3Provider } from 'ethers'; // Import Web3Provider directly    \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletConnect = ({\n  onConnect\n}) => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const connectWallet = async () => {\n    if (loading) return; // Prevent multiple requests    \n    setLoading(true);\n    try {\n      if (window.ethereum) {\n        // Request account access    \n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        onConnect(accounts[0]);\n\n        // Create a provider and signer    \n        const provider = new Web3Provider(window.ethereum); // Use Web3Provider    \n        const signer = provider.getSigner();\n        console.log('Signer address:', await signer.getAddress());\n      } else {\n        alert('Please install MetaMask!');\n      }\n    } catch (error) {\n      console.error('Error connecting to wallet:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    disabled: loading,\n    children: loading ? 'Connecting...' : 'Connect Wallet'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(WalletConnect, \"/Rjh5rPqCCqf0XYnTUk9ZNavw3Q=\");\n_c = WalletConnect;\nexport default WalletConnect;\nvar _c;\n$RefreshReg$(_c, \"WalletConnect\");","map":{"version":3,"names":["React","useState","Web3Provider","jsxDEV","_jsxDEV","WalletConnect","onConnect","_s","loading","setLoading","connectWallet","window","ethereum","accounts","request","method","provider","signer","getSigner","console","log","getAddress","alert","error","onClick","disabled","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Polygon Panda Party/polygon-panda-party/my-express-app/src/components/WalletConnect.js"],"sourcesContent":["import React, { useState } from 'react';    \r\nimport { Web3Provider } from 'ethers'; // Import Web3Provider directly    \r\n\r\nconst WalletConnect = ({ onConnect }) => {    \r\n  const [loading, setLoading] = useState(false);    \r\n\r\n  const connectWallet = async () => {    \r\n    if (loading) return; // Prevent multiple requests    \r\n    setLoading(true);    \r\n    try {    \r\n      if (window.ethereum) {    \r\n        // Request account access    \r\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });    \r\n        onConnect(accounts[0]);    \r\n\r\n        // Create a provider and signer    \r\n        const provider = new Web3Provider(window.ethereum); // Use Web3Provider    \r\n        const signer = provider.getSigner();    \r\n        console.log('Signer address:', await signer.getAddress());    \r\n      } else {    \r\n        alert('Please install MetaMask!');    \r\n      }    \r\n    } catch (error) {    \r\n      console.error('Error connecting to wallet:', error);    \r\n    } finally {    \r\n      setLoading(false);    \r\n    }    \r\n  };    \r\n\r\n  return (    \r\n    <button onClick={connectWallet} disabled={loading}>    \r\n      {loading ? 'Connecting...' : 'Connect Wallet'}    \r\n    </button>    \r\n  );    \r\n};    \r\n\r\nexport default WalletConnect;  "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,YAAY,QAAQ,QAAQ,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMS,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAIF,OAAO,EAAE,OAAO,CAAC;IACrBC,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,IAAIE,MAAM,CAACC,QAAQ,EAAE;QACnB;QACA,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAsB,CAAC,CAAC;QACjFT,SAAS,CAACO,QAAQ,CAAC,CAAC,CAAC,CAAC;;QAEtB;QACA,MAAMG,QAAQ,GAAG,IAAId,YAAY,CAACS,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC;QACpD,MAAMK,MAAM,GAAGD,QAAQ,CAACE,SAAS,CAAC,CAAC;QACnCC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,MAAMH,MAAM,CAACI,UAAU,CAAC,CAAC,CAAC;MAC3D,CAAC,MAAM;QACLC,KAAK,CAAC,0BAA0B,CAAC;MACnC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD,CAAC,SAAS;MACRd,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEL,OAAA;IAAQoB,OAAO,EAAEd,aAAc;IAACe,QAAQ,EAAEjB,OAAQ;IAAAkB,QAAA,EAC/ClB,OAAO,GAAG,eAAe,GAAG;EAAgB;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEb,CAAC;AAACvB,EAAA,CA/BIF,aAAa;AAAA0B,EAAA,GAAb1B,aAAa;AAiCnB,eAAeA,aAAa;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}