{"ast":null,"code":"var _jsxFileName = \"C:\\\\Polygon Panda Party\\\\polygon-panda-party\\\\my-express-app\\\\src\\\\components\\\\WalletConnect.js\";\nimport React, { useState } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletConnect = ({\n  onConnect,\n  isLoading\n}) => {\n  const connectWallet = async () => {\n    if (isLoading) return;\n    try {\n      if (window.ethereum) {\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        const address = await signer.getAddress();\n        onConnect(address);\n      } else {\n        alert('Please install MetaMask!');\n      }\n    } catch (error) {\n      console.error('Error connecting to wallet:', error);\n      alert('Error connecting to wallet. Please try again.'); // User-friendly error message  \n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    disabled: isLoading,\n    className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n    children: isLoading ? 'Connecting...' : 'Connect Wallet'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_c = WalletConnect;\nexport default WalletConnect;\nvar _c;\n$RefreshReg$(_c, \"WalletConnect\");","map":{"version":3,"names":["React","useState","ethers","jsxDEV","_jsxDEV","WalletConnect","onConnect","isLoading","connectWallet","window","ethereum","request","method","provider","BrowserProvider","signer","getSigner","address","getAddress","alert","error","console","onClick","disabled","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Polygon Panda Party/polygon-panda-party/my-express-app/src/components/WalletConnect.js"],"sourcesContent":["import React, { useState } from 'react';  \r\nimport { ethers } from 'ethers';  \r\n  \r\nconst WalletConnect = ({ onConnect, isLoading }) => {  \r\n  const connectWallet = async () => {  \r\n    if (isLoading) return;  \r\n    try {  \r\n      if (window.ethereum) {  \r\n        await window.ethereum.request({ method: 'eth_requestAccounts' });  \r\n        const provider = new ethers.BrowserProvider(window.ethereum);  \r\n        const signer = await provider.getSigner();  \r\n        const address = await signer.getAddress();  \r\n        onConnect(address);  \r\n      } else {  \r\n        alert('Please install MetaMask!');  \r\n      }  \r\n    } catch (error) {  \r\n      console.error('Error connecting to wallet:', error);  \r\n      alert('Error connecting to wallet. Please try again.'); // User-friendly error message  \r\n    }  \r\n  };  \r\n  \r\n  return (  \r\n    <button onClick={connectWallet} disabled={isLoading} className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">  \r\n      {isLoading ? 'Connecting...' : 'Connect Wallet'}  \r\n    </button>  \r\n  );  \r\n};  \r\n  \r\nexport default WalletConnect;  "],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,aAAa,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAU,CAAC,KAAK;EAClD,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAID,SAAS,EAAE;IACf,IAAI;MACF,IAAIE,MAAM,CAACC,QAAQ,EAAE;QACnB,MAAMD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAsB,CAAC,CAAC;QAChE,MAAMC,QAAQ,GAAG,IAAIX,MAAM,CAACY,eAAe,CAACL,MAAM,CAACC,QAAQ,CAAC;QAC5D,MAAMK,MAAM,GAAG,MAAMF,QAAQ,CAACG,SAAS,CAAC,CAAC;QACzC,MAAMC,OAAO,GAAG,MAAMF,MAAM,CAACG,UAAU,CAAC,CAAC;QACzCZ,SAAS,CAACW,OAAO,CAAC;MACpB,CAAC,MAAM;QACLE,KAAK,CAAC,0BAA0B,CAAC;MACnC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDD,KAAK,CAAC,+CAA+C,CAAC,CAAC,CAAC;IAC1D;EACF,CAAC;EAED,oBACEf,OAAA;IAAQkB,OAAO,EAAEd,aAAc;IAACe,QAAQ,EAAEhB,SAAU;IAACiB,SAAS,EAAC,sEAAsE;IAAAC,QAAA,EAClIlB,SAAS,GAAG,eAAe,GAAG;EAAgB;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEb,CAAC;AAACC,EAAA,GAxBIzB,aAAa;AA0BnB,eAAeA,aAAa;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}