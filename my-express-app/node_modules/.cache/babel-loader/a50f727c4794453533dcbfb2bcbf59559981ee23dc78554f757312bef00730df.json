{"ast":null,"code":"var _jsxFileName = \"C:\\\\Polygon Panda Party\\\\polygon-panda-party\\\\my-express-app\\\\src\\\\components\\\\PastWinners.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n// Sample data for past winners (this would typically come from a database or API)  \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialPastWinners = [{\n  id: 1,\n  prize: 'Grand Prize',\n  amount: '\\$1,500',\n  winner: 'NFT#1234',\n  date: '2024-01-15'\n}, {\n  id: 2,\n  prize: 'Second Prize',\n  amount: '\\$1,000',\n  winner: 'NFT#5678',\n  date: '2024-01-15'\n}\n// Add more initial winners as needed  \n];\nconst PastWinners = () => {\n  _s();\n  const [pastWinners, setPastWinners] = useState(initialPastWinners);\n\n  // Function to add a new winner (this would be called after winners are selected)  \n  const addWinner = newWinner => {\n    setPastWinners(prevWinners => {\n      // Limit to the last 12 months  \n      const filteredWinners = prevWinners.filter(winner => {\n        const winnerDate = new Date(winner.date);\n        const twelveMonthsAgo = new Date();\n        twelveMonthsAgo.setFullYear(twelveMonthsAgo.getFullYear() - 1);\n        return winnerDate >= twelveMonthsAgo;\n      });\n      return [...filteredWinners, newWinner];\n    });\n  };\n\n  // Simulate adding a winner (this would be replaced with actual logic)  \n  useEffect(() => {\n    const newWinner = {\n      id: pastWinners.length + 1,\n      prize: 'Third Prize',\n      amount: '\\$750',\n      winner: 'NFT#9101',\n      date: new Date().toISOString().split('T')[0] // Current date  \n    };\n    addWinner(newWinner);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-bubblegum mb-6 text-center\",\n      children: \"\\uD83C\\uDFC6 Past Winners\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-lg p-6\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"space-y-4\",\n        children: pastWinners.map(winner => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"flex justify-between items-center p-4 border-b border-gray-200\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-semibold\",\n            children: winner.prize\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-gray-600\",\n            children: winner.amount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-green-600 font-bold\",\n            children: winner.winner\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-gray-400\",\n            children: new Date(winner.date).toLocaleDateString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this)]\n        }, winner.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(PastWinners, \"ZtClw8Z8jqCEjFzc5pjlYhhmlI0=\");\n_c = PastWinners;\nexport default PastWinners;\nvar _c;\n$RefreshReg$(_c, \"PastWinners\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","initialPastWinners","id","prize","amount","winner","date","PastWinners","_s","pastWinners","setPastWinners","addWinner","newWinner","prevWinners","filteredWinners","filter","winnerDate","Date","twelveMonthsAgo","setFullYear","getFullYear","length","toISOString","split","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","toLocaleDateString","_c","$RefreshReg$"],"sources":["C:/Polygon Panda Party/polygon-panda-party/my-express-app/src/components/PastWinners.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';  \r\n\r\n// Sample data for past winners (this would typically come from a database or API)  \r\nconst initialPastWinners = [  \r\n  { id: 1, prize: 'Grand Prize', amount: '\\$1,500', winner: 'NFT#1234', date: '2024-01-15' },  \r\n  { id: 2, prize: 'Second Prize', amount: '\\$1,000', winner: 'NFT#5678', date: '2024-01-15' },  \r\n  // Add more initial winners as needed  \r\n];  \r\n\r\nconst PastWinners = () => {  \r\n  const [pastWinners, setPastWinners] = useState(initialPastWinners);  \r\n\r\n  // Function to add a new winner (this would be called after winners are selected)  \r\n  const addWinner = (newWinner) => {  \r\n    setPastWinners((prevWinners) => {  \r\n      // Limit to the last 12 months  \r\n      const filteredWinners = prevWinners.filter(winner => {  \r\n        const winnerDate = new Date(winner.date);  \r\n        const twelveMonthsAgo = new Date();  \r\n        twelveMonthsAgo.setFullYear(twelveMonthsAgo.getFullYear() - 1);  \r\n        return winnerDate >= twelveMonthsAgo;  \r\n      });  \r\n      return [...filteredWinners, newWinner];  \r\n    });  \r\n  };  \r\n\r\n  // Simulate adding a winner (this would be replaced with actual logic)  \r\n  useEffect(() => {  \r\n    const newWinner = {  \r\n      id: pastWinners.length + 1,  \r\n      prize: 'Third Prize',  \r\n      amount: '\\$750',  \r\n      winner: 'NFT#9101',  \r\n      date: new Date().toISOString().split('T')[0], // Current date  \r\n    };  \r\n    addWinner(newWinner);  \r\n  }, []);  \r\n\r\n  return (  \r\n    <div className=\"p-8\">  \r\n      <h2 className=\"text-3xl font-bubblegum mb-6 text-center\">üèÜ Past Winners</h2>  \r\n      <div className=\"bg-white rounded-lg shadow-lg p-6\">  \r\n        <ul className=\"space-y-4\">  \r\n          {pastWinners.map((winner) => (  \r\n            <li key={winner.id} className=\"flex justify-between items-center p-4 border-b border-gray-200\">  \r\n              <span className=\"font-semibold\">{winner.prize}</span>  \r\n              <span className=\"text-gray-600\">{winner.amount}</span>  \r\n              <span className=\"text-green-600 font-bold\">{winner.winner}</span>  \r\n              <span className=\"text-gray-400\">{new Date(winner.date).toLocaleDateString()}</span>  \r\n            </li>  \r\n          ))}  \r\n        </ul>  \r\n      </div>  \r\n    </div>  \r\n  );  \r\n};  \r\n\r\nexport default PastWinners;  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}