{"ast":null,"code":"var _jsxFileName = \"C:\\\\Polygon Panda Party\\\\polygon-panda-party\\\\my-express-app\\\\src\\\\components\\\\WalletConnect.js\";\nimport React from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletConnect = ({\n  onConnect,\n  isLoading\n}) => {\n  const connectWallet = async () => {\n    if (isLoading) return;\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        onConnect(accounts[0]);\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        console.log('Signer address:', await signer.getAddress());\n      } else {\n        alert('Please install MetaMask!');\n      }\n    } catch (error) {\n      console.error('Error connecting to wallet:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    disabled: isLoading,\n    className: \"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\",\n    children: isLoading ? 'Connecting...' : 'Connect Wallet'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_c = WalletConnect;\nexport default WalletConnect;\nvar _c;\n$RefreshReg$(_c, \"WalletConnect\");","map":{"version":3,"names":["React","ethers","jsxDEV","_jsxDEV","WalletConnect","onConnect","isLoading","connectWallet","window","ethereum","accounts","request","method","provider","BrowserProvider","signer","getSigner","console","log","getAddress","alert","error","onClick","disabled","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Polygon Panda Party/polygon-panda-party/my-express-app/src/components/WalletConnect.js"],"sourcesContent":["import React from 'react';  \r\nimport { ethers } from 'ethers';  \r\n  \r\nconst WalletConnect = ({ onConnect, isLoading }) => {  \r\n  const connectWallet = async () => {  \r\n    if (isLoading) return;  \r\n    try {  \r\n      if (window.ethereum) {  \r\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });  \r\n        onConnect(accounts[0]);  \r\n  \r\n        const provider = new ethers.BrowserProvider(window.ethereum);  \r\n        const signer = await provider.getSigner();  \r\n        console.log('Signer address:', await signer.getAddress());  \r\n      } else {  \r\n        alert('Please install MetaMask!');  \r\n      }  \r\n    } catch (error) {  \r\n      console.error('Error connecting to wallet:', error);  \r\n    }  \r\n  };  \r\n  \r\n  return (  \r\n    <button   \r\n      onClick={connectWallet}   \r\n      disabled={isLoading}   \r\n      className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"  \r\n    >  \r\n      {isLoading ? 'Connecting...' : 'Connect Wallet'}  \r\n    </button>  \r\n  );  \r\n};  \r\n  \r\nexport default WalletConnect;  "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,aAAa,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAU,CAAC,KAAK;EAClD,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAID,SAAS,EAAE;IACf,IAAI;MACF,IAAIE,MAAM,CAACC,QAAQ,EAAE;QACnB,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAsB,CAAC,CAAC;QACjFP,SAAS,CAACK,QAAQ,CAAC,CAAC,CAAC,CAAC;QAEtB,MAAMG,QAAQ,GAAG,IAAIZ,MAAM,CAACa,eAAe,CAACN,MAAM,CAACC,QAAQ,CAAC;QAC5D,MAAMM,MAAM,GAAG,MAAMF,QAAQ,CAACG,SAAS,CAAC,CAAC;QACzCC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,MAAMH,MAAM,CAACI,UAAU,CAAC,CAAC,CAAC;MAC3D,CAAC,MAAM;QACLC,KAAK,CAAC,0BAA0B,CAAC;MACnC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;EAED,oBACElB,OAAA;IACEmB,OAAO,EAAEf,aAAc;IACvBgB,QAAQ,EAAEjB,SAAU;IACpBkB,SAAS,EAAC,4DAA4D;IAAAC,QAAA,EAErEnB,SAAS,GAAG,eAAe,GAAG;EAAgB;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEb,CAAC;AAACC,EAAA,GA5BI1B,aAAa;AA8BnB,eAAeA,aAAa;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}